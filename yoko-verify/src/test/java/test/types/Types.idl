/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
*  contributor license agreements.  See the NOTICE file distributed with
*  this work for additional information regarding copyright ownership.
*  The ASF licenses this file to You under the Apache License, Version 2.0
*  (the "License"); you may not use this file except in compliance with
*  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#include <TypeCode.idl>

struct TestStruct1
{
    short s;
    long l;
    double d;
    boolean b;
    char c;
    octet o;
    string str;
};

enum TestEnum
{
    A, B, C
};

typedef sequence<octet> OctetSeq;
typedef sequence<char> CharSeq;
typedef sequence<double> DoubleSeq;
typedef sequence<TestStruct1> TestStruct1Seq;
typedef sequence<TestEnum> TestEnumSeq;

typedef string<10> BoundedString;

typedef sequence<double, 10> Double10Seq;
typedef sequence<Double10Seq, 10> Double10Seq10Seq;
typedef sequence<TestStruct1, 20> TestStruct120Seq;
typedef sequence<TestEnum, 30> TestEnum30Seq;
typedef sequence<string, 40> String40Seq;

typedef double DoubleArray[10][20][30];

struct TestStruct2;

typedef sequence<TestStruct2> TestStruct2Seq;

struct TestStruct2
{
    TestStruct1 s;
    any a;
    DoubleArray da;
    string sa[100];
};

typedef fixed<24,0> TestFixed1;
typedef fixed<24,8> TestFixed2;

struct TestStruct3
{
    long l;
    sequence<TestStruct3> seq;
};

struct TestStruct4
{
    TestStruct3 a;
    sequence< TestStruct3 > b;
};

union TestUnion1 switch(long)
{
case -1: long l;
case -2: DoubleArray a;
case -3: string s;
case 0:
case 1:
case 2:
case 3:
case -4:
case -5: TestStruct2 str;
default: CORBA::TypeCode tc;
};

union TestUnion2 switch(TestEnum)
{
case A:
case B: sequence<long> seq;
case C: TestUnion1 un;
};

union TestUnion3 switch(char)
{
case 'a':
case 'b': char c;
case 'c': any a;
case 'd': string ar[10][20];
case 'x': string s;
};

union TestUnion4 switch(short)
{
case 0: sequence<TestUnion4> seq;
case 1: char c;
};

union TestUnion5 switch(long long)
{
default:       string f;
case -42:      any a;
case 100000:
case 50000000: char c;
};
